name: CD Deploy to Naver Cloud (Password Variant)

on:
  push:
    branches: [ "main" ]
  # 수동 재배포용
  workflow_dispatch:

concurrency:
  group: deploy-prod
  cancel-in-progress: true

env:
  REPO_URL: https://github.com/${{ github.repository }}.git
  APP_DIR: /opt/selfstar

jobs:
  deploy-password:
    name: Deploy via password (appleboy/ssh-action)
    # upstream main 에 'merge commit' 발생한 push 인지 필터 (머지 커밋 메시지 패턴 기반)
    if: contains(github.event.head_commit.message, 'Merge pull request') || contains(github.event.head_commit.message, 'Merge branch')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
    steps:
      - name: Checkout (metadata only)
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Preflight validate required secrets
        run: |
          missing=0
          for v in SERVER_HOST SERVER_USER SERVER_PASSWORD; do
            if [ -z "${!v}" ]; then
              echo "::error::Missing required secret: $v"; missing=1; fi; done
          if [ "$missing" -eq 1 ]; then
            echo "Required secrets not set. Configure in Settings > Secrets (SERVER_HOST, SERVER_USER, SERVER_PASSWORD)." >&2
            exit 1
          fi
          echo "All required secrets present. Proceeding."

      - name: Deploy to server (password SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          password: ${{ env.SERVER_PASSWORD }}
          script_stop: true
          script: |
            set -euo pipefail
            echo "[SERVER] Deploy start: $(date -u)"
            APP_DIR="${APP_DIR:-/opt/selfstar}"
            REPO_URL="${REPO_URL:-https://github.com/${GITHUB_REPOSITORY}.git}"

            if ! command -v docker >/dev/null 2>&1; then
              echo "[ERROR] docker not installed" >&2
              exit 1
            fi

            if command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              DC="docker compose"
            fi

            mkdir -p /opt
            if [ -d "$APP_DIR/.git" ]; then
              echo "[SERVER] Updating repo"
              cd "$APP_DIR"
              git fetch --all --prune
              git checkout main
              git reset --hard origin/main || true
              git pull --ff-only || true
            else
              echo "[SERVER] Cloning $REPO_URL"
              git clone "$REPO_URL" "$APP_DIR"
              cd "$APP_DIR"
            fi

            # (환경 파일 생성 단계 제거됨: BACKEND_ENV_PROD / FRONTEND_ENV_PROD / AI_ENV_PROD 미사용)

            echo "[SERVER] systemd reload & service restart (selfstar.service)"
            if systemctl list-unit-files | grep -q '^selfstar.service'; then
              systemctl daemon-reload || true
              systemctl restart selfstar.service || true
              if systemctl is-active --quiet selfstar.service; then
                echo "[SERVER] selfstar.service active"
              else
                echo "[SERVER][WARN] selfstar.service not active after restart" >&2
              fi
            else
              echo "[SERVER] selfstar.service not found, skipping restart"
            fi

            echo "[SERVER] Health check (after systemd restart)"
            # FastAPI 에 /health 엔드포인트가 없는 환경일 경우를 대비해 존재 여부 확인 후 호출
            if curl -fsS -o /dev/null -w '%{http_code}' http://localhost/health 2>/dev/null | grep -qE '^(200|204)$'; then
              curl -fsS http://localhost/health || true
            else
              echo "[SERVER] /health endpoint not available or non-200; skipping"
            fi

            echo "[SERVER] Prune dangling images"
            docker image prune -f || true
            echo "[SERVER] Deploy complete: $(date -u)"

      - name: Summary
        if: always()
        run: echo "배포(패스워드 방식) 완료 또는 로그 확인 필요"

    ## (Optional) 조건부 실행을 원하면 아래 if 조건 사용 예:
    # if: ${{ env.SERVER_HOST != '' && env.SERVER_PASSWORD != '' }}
