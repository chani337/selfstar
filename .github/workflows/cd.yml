name: CD Deploy to Naver Cloud (Password Variant)

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [closed]
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-prod
  cancel-in-progress: true

env:
  APP_DIR: /opt/selfstar
  HEALTH_URL: http://localhost/health

jobs:
  deploy-password:
    name: Deploy via password (SCP + SSH)
    runs-on: ubuntu-latest
    timeout-minutes: 20

    # 트리거 정규화:
    # - 수동 실행
    # - main으로 푸시
    # - PR이 main에 머지되어 closed되었고 merged == true
    if: >
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' &&
       github.event.action == 'closed' &&
       github.event.pull_request.merged == true &&
       github.event.pull_request.base.ref == 'main')

    env:
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
      # 필요 시 주석 해제해서 Secrets→파일 렌더링
      # BACKEND_ENV_PROD: ${{ secrets.BACKEND_ENV_PROD }}
      # FRONTEND_ENV_PROD: ${{ secrets.FRONTEND_ENV_PROD }}
      # AI_ENV_PROD: ${{ secrets.AI_ENV_PROD }}

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Preflight validate required secrets
        run: |
          set -euo pipefail
          missing=0
          for v in SERVER_HOST SERVER_USER SERVER_PASSWORD; do
            if [ -z "${!v:-}" ]; then
              echo "::error::Missing required secret: $v"; missing=1; fi; done
          if [ "$missing" -eq 1 ]; then
            echo "Required secrets not set. Configure SERVER_HOST/USER/PASSWORD." >&2
            exit 1
          fi
          echo "All required secrets present. Proceeding."

      # --- (옵션) 환경파일 렌더링 ---
      - name: Render backend env (optional)
        if: env.BACKEND_ENV_PROD != ''
        run: |
          mkdir -p backend
          printf "%s" "${BACKEND_ENV_PROD}" > backend/.env.production

      - name: Render frontend env (optional)
        if: env.FRONTEND_ENV_PROD != ''
        run: |
          mkdir -p frontend
          printf "%s" "${FRONTEND_ENV_PROD}" > frontend/.env.production

      - name: Render AI env (optional)
        if: env.AI_ENV_PROD != ''
        run: |
          mkdir -p ai
          printf "%s" "${AI_ENV_PROD}" > ai/.env.production

      # --- 서버로 코드 동기화 (서버에서 git pull 불필요) ---
      - name: Sync code to server (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          password: ${{ env.SERVER_PASSWORD }}
          source: "."
          target: "${{ env.APP_DIR }}"
          overwrite: true
          strip_components: 0
          exclude: |
            .git
            .github
            node_modules
            **/node_modules/**
            **/.next/**
            **/dist/**
            **/.venv/**
            **/__pycache__/**
            **/.mypy_cache/**
            **/.pytest_cache/**
            **/*.log

      # --- systemd 재시작 + 실패시 실패 처리 + 헬스체크 ---
      - name: Deploy on server (systemd restart + health)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          password: ${{ env.SERVER_PASSWORD }}
          script_stop: true
          envs: APP_DIR,HEALTH_URL
          script: |
            set -euo pipefail
            echo "[SERVER] Deploy start: $(date -u)"
            APP_DIR="${APP_DIR:-/opt/selfstar}"
            HEALTH_URL="${HEALTH_URL:-http://localhost/health}"

            if ! command -v docker >/dev/null 2>&1; then
              echo "[ERROR] docker not installed" >&2
              exit 1
            fi

            if command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              DC="docker compose"
            fi

            if [ ! -d "$APP_DIR" ]; then
              echo "[ERROR] APP_DIR not found: $APP_DIR" >&2
              exit 1
            fi
            cd "$APP_DIR"
            if [ -f docker-compose.yml ] || [ -f docker-compose.yaml ]; then
              echo "[SERVER] Compose config check"
              $DC config >/dev/null
            else
              echo "[SERVER][WARN] No docker-compose.yml found (systemd 내부에서 처리 가정)"
            fi

            echo "[SERVER] systemd reload & restart selfstar.service"
            if systemctl list-unit-files | grep -q '^selfstar.service'; then
              systemctl daemon-reload
              if ! systemctl restart selfstar.service; then
                echo "[SERVER][ERROR] Failed to restart selfstar.service" >&2
                systemctl status selfstar.service -n 100 --no-pager >&2 || true
                journalctl -u selfstar.service -n 200 --no-pager >&2 || true
                docker ps -a >&2 || true
                exit 1
              fi
              if ! systemctl is-active --quiet selfstar.service; then
                echo "[SERVER][ERROR] selfstar.service is not active after restart" >&2
                systemctl status selfstar.service -n 100 --no-pager >&2 || true
                journalctl -u selfstar.service -n 200 --no-pager >&2 || true
                docker ps -a >&2 || true
                exit 1
              fi
            else
              echo "[SERVER][ERROR] selfstar.service not found" >&2
              exit 1
            fi

            echo "[SERVER] Health check on ${HEALTH_URL}"
            ok=0
            for i in $(seq 1 10); do
              code=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL" || true)
              if [ "$code" = "200" ] || [ "$code" = "204" ]; then
                echo "[SERVER] Health OK ($code)"
                ok=1
                break
              fi
              echo "[SERVER] Health not ready (got $code). retry $i/10..."
              sleep 3
            done
            if [ "$ok" -ne 1 ]; then
              echo "[SERVER][ERROR] Service unhealthy after deploy" >&2
              systemctl status selfstar.service -n 100 --no-pager >&2 || true
              journalctl -u selfstar.service -n 200 --no-pager >&2 || true
              docker ps -a >&2 || true
              exit 1
            fi

            echo "[SERVER] Prune dangling images"
            docker image prune -f || true
            echo "[SERVER] Deploy complete: $(date -u)"

      - name: Summary
        if: always()
        run: echo "배포 완료(또는 실패 시 위 로그 확인). 이제 스쿼시/리베이스 머지도 자동 배포돼요."
